{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Imports required\n",
    "import pandas as pd\n",
    "from sklearn import linear_model,metrics\n",
    "from sklearn.model_selection import train_test_split\n",
    "import numpy as np\n",
    "import warnings\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df = pd.read_csv(\"lab_sensor_log.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>AQI</th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Lab Id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>462.0</td>\n",
       "      <td>13-03-2020 00:00</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>28.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>462.0</td>\n",
       "      <td>13-03-2020 00:00</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>25.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>13-03-2020 00:00</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>25.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>16-03-2020 00:00</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>26.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>16-03-2020 00:00</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Temperature  Humidity    AQI         Timestamp  Lab Id\n",
       "0   1         28.0      56.0  462.0  13-03-2020 00:00    1001\n",
       "1   2         28.0      56.0  462.0  13-03-2020 00:00    1001\n",
       "2   3         25.0      64.0  111.0  13-03-2020 00:00    1001\n",
       "3   4         25.0      55.0  105.0  16-03-2020 00:00    1001\n",
       "4   5         26.0      77.0  250.0  16-03-2020 00:00    1001"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(571, 6)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>AQI</th>\n",
       "      <th>Timestamp</th>\n",
       "      <th>Lab Id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>462.0</td>\n",
       "      <td>13-03-2020 00:00</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>28.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>462.0</td>\n",
       "      <td>13-03-2020 00:00</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>25.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>111.0</td>\n",
       "      <td>13-03-2020 00:00</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>25.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>16-03-2020 00:00</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>26.0</td>\n",
       "      <td>77.0</td>\n",
       "      <td>250.0</td>\n",
       "      <td>16-03-2020 00:00</td>\n",
       "      <td>1001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Temperature  Humidity    AQI         Timestamp  Lab Id\n",
       "0   1         28.0      56.0  462.0  13-03-2020 00:00    1001\n",
       "1   2         28.0      56.0  462.0  13-03-2020 00:00    1001\n",
       "2   3         25.0      64.0  111.0  13-03-2020 00:00    1001\n",
       "3   4         25.0      55.0  105.0  16-03-2020 00:00    1001\n",
       "4   5         26.0      77.0  250.0  16-03-2020 00:00    1001"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x277b5063dc8>"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.lmplot(data = df,x = \"Humidity\",y=\"AQI\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "X = np.array(df[\"Humidity\"]).reshape(-1,1)\n",
    "y = np.array(df[\"AQI\"]).reshape(-1,1)\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "scaler.fit(X)\n",
    "X = scaler.transform(X)\n",
    "y = scaler.transform(y)\n",
    "\n",
    "X_train , X_test , y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients : [[2.11400424]]\n",
      "Variance score : 0.16025339861367238\n"
     ]
    }
   ],
   "source": [
    "\n",
    "model = linear_model.LinearRegression()\n",
    "model.fit(X_train , y_train)\n",
    "\n",
    "print(\"Coefficients : {}\".format(model.coef_))\n",
    "print(\"Variance score : {}\".format(model.score(X_test,y_test)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Root Mean Squared Error: 0.7995122417099196\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred = model.predict(X_test)\n",
    "print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, pred)))\n",
    "plt.scatter(X_test,y_test,color = \"b\")\n",
    "plt.plot(X_test,pred,color = \"g\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
